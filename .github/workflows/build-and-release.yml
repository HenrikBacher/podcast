name: Build and Release

on:
  push:
    branches: [main]
    paths: ["src/**"]
  pull_request:
    branches: [main]
    paths: ["src/**"]

env:
  DOTNET_VERSION: "8.0.x"

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-tag: ${{ steps.version.outputs.version-tag }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest tag using GitHub CLI
          try {
            $tags = gh api repos/${{ github.repository }}/tags --jq '.[0].name' 2>$null
            $LATEST_TAG = if ($tags) { $tags } else { "v0.0.0" }
          } catch {
            $LATEST_TAG = "v0.0.0"
          }
          Write-Host "Latest tag: $LATEST_TAG"

          # Parse version numbers
          $VERSION_NUMBER = $LATEST_TAG -replace '^v', ''
          $VERSION_PARTS = $VERSION_NUMBER -split '\.'
          $MAJOR = [int]$VERSION_PARTS[0]
          $MINOR = if ($VERSION_PARTS.Length -gt 1) { [int]$VERSION_PARTS[1] } else { 0 }
          $PATCH = if ($VERSION_PARTS.Length -gt 2) { [int]$VERSION_PARTS[2] } else { 0 }

          # Default to patch bump
          $BUMP_TYPE = "patch"
          $IS_PRERELEASE = "false"

          # Check for version bump indicators in PR or commit messages
          if ("${{ github.event_name }}" -eq "pull_request") {
            $IS_PRERELEASE = "true"
            $PR_BODY = "${{ github.event.pull_request.body }}"
            if ($PR_BODY -match "(?i)(breaking change|major version|\[major\])") {
              $BUMP_TYPE = "major"
            } elseif ($PR_BODY -match "(?i)(feature|minor version|\[minor\])") {
              $BUMP_TYPE = "minor"
            }
          } else {
            # Direct commit to main - check commit message using GitHub CLI
            try {
              $COMMIT_MSG = gh api repos/${{ github.repository }}/commits/${{ github.sha }} --jq '.commit.message'
              if ($COMMIT_MSG -match "(?i)(breaking change|major version|\[major\])") {
                $BUMP_TYPE = "major"
              } elseif ($COMMIT_MSG -match "(?i)(feature|minor version|\[minor\])") {
                $BUMP_TYPE = "minor"
              }
            } catch {
              Write-Host "Could not fetch commit message, using default patch bump"
            }
          }

          Write-Host "Bump type: $BUMP_TYPE"
          Write-Host "Is prerelease: $IS_PRERELEASE"

          # Calculate new version
          switch ($BUMP_TYPE) {
            "major" {
              $NEW_VERSION = "$($MAJOR + 1).0.0"
            }
            "minor" {
              $NEW_VERSION = "$MAJOR.$($MINOR + 1).0"
            }
            "patch" {
              $NEW_VERSION = "$MAJOR.$MINOR.$($PATCH + 1)"
            }
          }

          # Add prerelease suffix for PR builds
          if ($IS_PRERELEASE -eq "true") {
            $PR_NUMBER = "${{ github.event.pull_request.number }}"
            $COMMIT_SHA = "${{ github.event.pull_request.head.sha }}"
            $SHORT_SHA = $COMMIT_SHA.Substring(0, 8)
            $NEW_VERSION = "${NEW_VERSION}-pr.${PR_NUMBER}.${SHORT_SHA}"
          }

          Write-Host "New version: $NEW_VERSION"
          "version=$NEW_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "version-tag=v$NEW_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "is-prerelease=$IS_PRERELEASE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  build:
    needs: determine-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: DrPodcast-linux-x64
          - os: windows-latest
            runtime: win-x64
            artifact-name: DrPodcast-win-x64
          - os: macos-latest
            runtime: osx-x64
            artifact-name: DrPodcast-osx-x64

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        shell: pwsh
        run: dotnet restore src/DrPodcast.csproj

      - name: Build
        shell: pwsh
        run: dotnet build src/DrPodcast.csproj --no-restore --configuration Release

      - name: Test
        shell: pwsh
        run: dotnet test src/DrPodcast.csproj --no-build --verbosity normal --configuration Release

      - name: Publish
        shell: pwsh
        run: |
          dotnet publish src/DrPodcast.csproj `
            --configuration Release `
            --runtime ${{ matrix.runtime }} `
            --self-contained true `
            --output ./publish/${{ matrix.runtime }} `
            -p:PublishSingleFile=true `
            -p:PublishTrimmed=true `
            -p:Version=${{ needs.determine-version.outputs.version }}

      - name: Create Archive
        shell: pwsh
        run: |
          Set-Location "publish/${{ matrix.runtime }}"
          if ("${{ matrix.runtime }}" -eq "win-x64") {
            7z a "../../${{ matrix.artifact-name }}.zip" *
          } else {
            tar -czf "../../${{ matrix.artifact-name }}.tar.gz" *
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            ${{ matrix.artifact-name }}.zip
            ${{ matrix.artifact-name }}.tar.gz
          retention-days: 30

  release:
    needs: [determine-version, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.determine-version.outputs.version-tag }}
          name: ${{ needs.determine-version.outputs.is-prerelease == 'true' && format('Prerelease {0}', needs.determine-version.outputs.version-tag) || format('Release {0}', needs.determine-version.outputs.version-tag) }}
          body: |
            ${{ needs.determine-version.outputs.is-prerelease == 'true' && '## üöß Prerelease Build' || '## ‚úÖ Stable Release' }}

            ${{ needs.determine-version.outputs.is-prerelease == 'true' && format('This is a prerelease build from PR #{0}. Use for testing purposes only.', github.event.pull_request.number) || 'This release was automatically generated and is ready for production use.' }}

            ### Download
            - **Linux (x64)**: DrPodcast-linux-x64.tar.gz
            - **Windows (x64)**: DrPodcast-win-x64.zip
            - **macOS (x64)**: DrPodcast-osx-x64.tar.gz

            ### Installation
            1. Download the appropriate file for your platform
            2. Extract the archive
            3. Run the executable directly (no installation required)

            ${{ needs.determine-version.outputs.is-prerelease == 'true' && '‚ö†Ô∏è **Warning**: This is a prerelease version and may contain bugs.' || '' }}
          draft: false
          prerelease: ${{ needs.determine-version.outputs.is-prerelease == 'true' }}
          files: |
            ./artifacts/DrPodcast-linux-x64/DrPodcast-linux-x64.tar.gz
            ./artifacts/DrPodcast-win-x64/DrPodcast-win-x64.zip
            ./artifacts/DrPodcast-osx-x64/DrPodcast-osx-x64.tar.gz

      - name: Delete Prerelease Versions
        if: needs.determine-version.outputs.is-prerelease == 'false'
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Write-Host "üßπ Deleting prerelease versions after stable release..."

          # Wait a moment to ensure the stable release is fully created
          Start-Sleep -Seconds 5

          try {
            # Get all releases using GitHub CLI
            $releases = gh release list --repo ${{ github.repository }} --json tagName,name,isPrerelease --limit 100
            $releasesObj = $releases | ConvertFrom-Json
            
            # Filter prerelease versions with PR pattern
            $prereleases = $releasesObj | Where-Object {
              $_.isPrerelease -eq $true -and $_.tagName -match "-pr\."
            }

            if ($prereleases.Count -eq 0) {
              Write-Host "No prerelease versions found to delete."
            } else {
              Write-Host "Found prerelease versions to delete:"
              
              foreach ($release in $prereleases) {
                Write-Host "  - Deleting: $($release.name) (Tag: $($release.tagName))"
                
                try {
                  # Delete the prerelease using GitHub CLI
                  gh release delete $release.tagName --repo ${{ github.repository }} --yes
                  Write-Host "    ‚úÖ Successfully deleted prerelease $($release.tagName)"
                } catch {
                  Write-Host "    ‚ùå Failed to delete prerelease $($release.tagName): $($_.Exception.Message)"
                }
              }
              Write-Host "üéâ Prerelease cleanup completed!"
            }
          } catch {
            Write-Host "‚ùå Failed to fetch releases: $($_.Exception.Message)"
          }
