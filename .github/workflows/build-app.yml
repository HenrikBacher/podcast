name: Build app

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  push:
    branches:
      - main
    paths-ignore:
      - "site/**"
      - "**/podcasts.json" 

jobs:
  build-app:
    name: "Build ommer"
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          # Helper function to determine version bump type
          get_bump_type() {
            local pr_body="$1"
            if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
              echo "patch"
            elif [[ $pr_body == *"[x] major"* ]]; then
              echo "major"
            elif [[ $pr_body == *"[x] minor"* ]]; then
              echo "minor"
            else
              echo "patch"
            fi
          }
          
          # Extract base version
          BASE_VERSION=$(grep "^version = " build.gradle.kts | head -n 1 | cut -d'"' -f2)
          [[ -z "$BASE_VERSION" ]] && { echo "Error: Could not extract version"; exit 1; }
          
          # Parse version components
          IFS='.' read -ra PARTS <<< "$BASE_VERSION"
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_BODY="${{ github.event.pull_request.body }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            # Determine bump type and next version
            BUMP_TYPE=$(get_bump_type "$PR_BODY")
            case $BUMP_TYPE in
              "major") NEXT_VERSION="$((PARTS[0] + 1)).0.0" ;;
              "minor") NEXT_VERSION="${PARTS[0]}.$((PARTS[1] + 1)).0" ;;
              *) NEXT_VERSION="${PARTS[0]}.${PARTS[1]}.$((PARTS[2] + 1))" ;;
            esac
            
            VERSION="$BASE_VERSION-PR${PR_NUMBER}-${COMMIT_HASH}"
            IS_PRERELEASE=true
            
            # Set description based on PR type
            if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
              DESCRIPTION="Automated dependency update by Dependabot"
            else
              DESCRIPTION=$(echo "$PR_BODY" | sed -n '/## Description/,/##/p' | sed '1d;$d')
            fi
            
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="$NEXT_VERSION"
            IS_PRERELEASE=false
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
            VERSION="$BASE_VERSION-${BRANCH_NAME}-${COMMIT_HASH}"
            IS_PRERELEASE=true
          fi
          
          # Update version in build.gradle.kts if on main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            sed -i "s/^version = .*/version = \"$VERSION\"/" build.gradle.kts
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add build.gradle.kts
            git commit -m "Bump version to $VERSION [skip ci]" || true
            git push || true
          fi
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          [[ -n "$DESCRIPTION" ]] && {
            echo "description<<EOF" >> $GITHUB_OUTPUT
            echo "$DESCRIPTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/configuration-cache
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build app
        run: |
          java --version
          chmod +x ./gradlew
          ./gradlew build

      - name:  Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          prerelease: ${{ steps.get_version.outputs.is_prerelease }}
          body: |            
            Changes in this release:
            ${{ steps.get_version.outputs.description }}
          files: |
            ./ommer/build/libs/ommer.jar
