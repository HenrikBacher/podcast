name: Build app

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  push:
    branches:
      - main
    paths-ignore:
      - "site/**"
      - "**/podcasts.json" 

jobs:
  build-app:
    name: "Build ommer"
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get build number
        id: build_number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release version that contains a build number
          LATEST_BUILD=$(gh api "repos/$GITHUB_REPOSITORY/releases" --jq '[.[] | select(.tag_name | test("-b\\d+"))] | .[0].tag_name | match("-b(\\d+)").captures[0].string // "0"')
          BUILD_NUM=$((LATEST_BUILD + 1))
          echo "number=$BUILD_NUM" >> $GITHUB_OUTPUT

      - name: Get version
        id: get_version
        run: |
          # Extract base version from build.gradle.kts
          BASE_VERSION=$(grep "^version = " build.gradle.kts | cut -d'"' -f2)
          # Split version into array
          IFS='.' read -ra PARTS <<< "$BASE_VERSION"
          BUILD_NUM="${{ steps.build_number.outputs.number }}"
          IS_PRERELEASE=false
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_BODY="${{ github.event.pull_request.body }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            # Determine next version based on PR template
            if [[ $PR_BODY == *"[x] major"* ]]; then
              NEXT_VERSION="$((PARTS[0] + 1)).0.0"
            elif [[ $PR_BODY == *"[x] minor"* ]]; then
              NEXT_VERSION="${PARTS[0]}.$((PARTS[1] + 1)).0"
            else
              NEXT_VERSION="${PARTS[0]}.${PARTS[1]}.$((PARTS[2] + 1))"
            fi
            
            # For PR builds, use special version format with build number
            VERSION="$BASE_VERSION-PR${PR_NUMBER}-b${BUILD_NUM}"
            IS_PRERELEASE=true
            
            # Extract description section from PR body
            DESCRIPTION=$(echo "$PR_BODY" | sed -n '/## Description/,/##/p' | sed '1d;$d')
            
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # On main branch, use the determined next version
            VERSION="$NEXT_VERSION"
            
          else
            # For other branches, use branch name and build number
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
            VERSION="$BASE_VERSION-${BRANCH_NAME}-b${BUILD_NUM}"
            IS_PRERELEASE=true
          fi
          
          # Update version in build.gradle.kts if on main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            sed -i "s/^version = .*/version = \"$VERSION\"/" build.gradle.kts
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add build.gradle.kts
            git commit -m "Bump version to $VERSION [skip ci]" || true
            git push || true
          fi
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          if [[ -n "$DESCRIPTION" ]]; then
            echo "description<<EOF" >> $GITHUB_OUTPUT
            echo "$DESCRIPTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/configuration-cache
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Build Kotlin app
        run: |
          java --version
          chmod +x ./gradlew
          ./gradlew build assemble

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          prerelease: ${{ steps.get_version.outputs.is_prerelease }}
          body: |            
            Changes in this release:
            ${{ steps.get_version.outputs.description }}
          files: |
            ./ommer/build/libs/ommer.jar
