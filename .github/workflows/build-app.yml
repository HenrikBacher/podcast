name: Build app

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  push:
    branches:
      - main
    paths-ignore:
      - "site/**"
      - "**/podcasts.json" 

jobs:
  build-app:
    name: "Build ommer"
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          # Extract version from build.gradle.kts
          VERSION=$(grep "^version = " build.gradle.kts | cut -d'"' -f2)
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Semantic versioning only on main branch
            IFS='.' read -ra PARTS <<< "$VERSION"
            
            # Check if the commit was from a merged PR
            PR_NUMBER=$(git log -1 --pretty=%B | grep -oP '(?<=Merge pull request #)\d+')
            if [[ -n "$PR_NUMBER" ]]; then
              PR_BODY=$(gh pr view $PR_NUMBER --json body -q .body)
              if [[ $PR_BODY == *"[x] major"* ]]; then
                NEW_VERSION="$((PARTS[0] + 1)).0.0"
              elif [[ $PR_BODY == *"[x] minor"* ]]; then
                NEW_VERSION="${PARTS[0]}.$((PARTS[1] + 1)).0"
              else
                NEW_VERSION="${PARTS[0]}.${PARTS[1]}.$((PARTS[2] + 1))"
              fi
              DESCRIPTION=$(echo "$PR_BODY" | sed -n '/## Description/,/##/p' | sed '1d;$d')
            else
              NEW_VERSION="${PARTS[0]}.${PARTS[1]}.$((PARTS[2] + 1))"
              DESCRIPTION=$(git log -1 --pretty=%B)
            fi
            
            TAG_NAME="v$NEW_VERSION"
          else:
            # For PR or other branches, use version-pr{number}-{commit}
            COMMIT_HASH=$(git rev-parse --short HEAD)
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              PR_NUMBER="${{ github.event.pull_request.number }}"
              DESCRIPTION=$(echo "${{ github.event.pull_request.body }}" | sed -n '/## Description/,/##/p' | sed '1d;$d')
              TAG_NAME="${VERSION}-pr${PR_NUMBER}-${COMMIT_HASH}"
            else
              # For direct pushes to non-main branches, use branch name
              BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g')
              DESCRIPTION=$(git log -1 --pretty=%B)
              TAG_NAME="${VERSION}-${BRANCH_NAME}-${COMMIT_HASH}"
            fi
            
            NEW_VERSION="$TAG_NAME"
          fi
          
          # Update version in build.gradle.kts if on main
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" build.gradle.kts
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add build.gradle.kts
            git commit -m "Bump version to $NEW_VERSION [skip ci]" || true
            git push || true
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/configuration-cache
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Build Kotlin app
        run: |
          java --version
          chmod +x ./gradlew
          ./gradlew build assemble

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          body: |
            Release v${{ steps.get_version.outputs.version }}
            
            Changes in this build:
            ${{ steps.get_version.outputs.description }}
          files: |
            ./ommer/build/libs/ommer.jar
