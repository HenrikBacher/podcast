name: Update feeds

# Add concurrency to cancel redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths:
      - "**/generate-feed.yml"
      - "**/podcasts.json"
  schedule:
    - cron: "0 * * * *"  # Run at minute 0 of every hour
  workflow_dispatch:

jobs:
  load-podcasts:
    name: Load Podcasts
    runs-on: ubuntu-24.04
    outputs:
      podcasts: ${{ steps.load_data.outputs.podcasts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Podcasts Data
        id: load_data
        run: |
          echo "podcasts=$(jq -c . < podcasts.json)" >> $GITHUB_OUTPUT

  update-feed:
    name: "Update ${{ matrix.podcasts.slug }} feed"
    needs: load-podcasts
    strategy:
      # Add fail-fast to stop all jobs if one fails
      fail-fast: true
      matrix: ${{ fromJson(needs.load-podcasts.outputs.podcasts) }}
    runs-on: ubuntu-24.04
    steps:
      - name: Get latest release
        id: get_latest_release
        run: |
          LATEST_RELEASE_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r '.assets[0].browser_download_url')
          echo "Downloading latest release from $LATEST_RELEASE_URL"
          curl -L $LATEST_RELEASE_URL -o ommer.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "adopt"
          java-package: "jre"

      - name: Execute parser for ${{ matrix.podcasts.slug }} feed
        uses: corrupt952/actions-retry-command@v1.0.7
        with:
          command: java -jar ./ommer.jar --slug ${{ matrix.podcasts.slug }} --urn ${{ matrix.podcasts.urn }} --imageUrl ${{ matrix.podcasts.image }} --apiKey ${{ secrets.API_KEY }} --baseUrl ${{ secrets.HOST_URL }}
          working_directory: ./
          max_attempts: 3
          retry_interval: 10

      - name: Upload feed artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.podcasts.slug }}
          path: output/${{ matrix.podcasts.slug }}.xml
          retention-days: 1

  publish-feed:
    name: "publish feeds"
    needs: [update-feed, load-podcasts]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _site/feeds
          merge-multiple: true

      - name: Get last deployment time
        id: last_deploy
        run: |
          LAST_DEPLOY=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments?environment=github-pages&per_page=1" | \
            jq -r '.[0].created_at // empty')
          if [ -z "$LAST_DEPLOY" ]; then
            LAST_DEPLOY="1970-01-01T00:00:00Z"
          fi
          echo "last_deploy_time=$LAST_DEPLOY" >> $GITHUB_OUTPUT

      - name: Get site URL
        id: get_site_url
        shell: pwsh
        run: |
          $headers = @{
              Authorization = "Bearer $env:GITHUB_TOKEN"
          }
          
          $deploymentUrl = "https://api.github.com/repos/$env:GITHUB_REPOSITORY/deployments?environment=github-pages&per_page=1"
          
          try {
              $response = Invoke-RestMethod -Uri $deploymentUrl -Headers $headers
              $siteUrl = $response[0].payload.web_url
          } catch {
              Write-Warning "Failed to get deployment URL: $_"
              $siteUrl = "https://$env:GITHUB_REPOSITORY_OWNER.github.io/$env:REPOSITORY_NAME"
          }
          
          Write-Host "url=$siteUrl" >> $env:GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_NAME: ${{ github.event.repository.name }}

      - name: Check for new feeds or feed changes
        id: deployment_check
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          function Get-FeedBuildDate {
              param([string]$FilePath)
              try {
                  $xml = [xml](Get-Content $FilePath)
                  $lastBuild = $xml.SelectSingleNode("//lastBuildDate")
                  if ($lastBuild) {
                      return [DateTime]::Parse($lastBuild.InnerText)
                  }
              } catch {
                  Write-Warning "Error processing $FilePath : $_"
              }
              return [DateTime]::MinValue
          }
          
          # Get deployment info
          $lastDeploy = if ($env:LAST_DEPLOY) { 
              [DateTime]::Parse($env:LAST_DEPLOY) 
          } else { 
              [DateTime]::MinValue 
          }
          
          # Get current feed files
          $xmlFiles = Get-ChildItem "_site/feeds/*.xml"
          $currentCount = $xmlFiles.Count
          
          # Try to get live count
          try {
              $webResponse = Invoke-WebRequest -Uri $env:SITE_URL -TimeoutSec 10
              $liveCount = ([regex]"<li.*?</li>").Matches($webResponse.Content).Count
          } catch {
              $liveCount = 0
          }
          
          Write-Host "Current XML file count: $currentCount"
          Write-Host "Live deployment feed count: $liveCount"
          
          $needsDeploy = $false
          
          if ($currentCount -ne $liveCount) {
              $needsDeploy = $true
          } else {
              # Process files in parallel using jobs
              $jobs = @()
              foreach ($file in $xmlFiles) {
                  $jobs += Start-Job -ScriptBlock {
                      param($path)
                      $result = Get-FeedBuildDate -FilePath $path
                      return @{
                          Path = $path
                          BuildDate = $result
                      }
                  } -ArgumentList $file.FullName
              }
              
              # Wait for all jobs and get results
              $results = $jobs | Wait-Job | Receive-Job
              Remove-Job -Job $jobs
              
              # Check if any feed is newer than last deployment
              $needsDeploy = ($results | Where-Object { $_.BuildDate -gt $lastDeploy }).Count -gt 0
          }
          
          "needs_deploy=$($needsDeploy.ToString().ToLower())" >> $env:GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LAST_DEPLOY: ${{ steps.last_deploy.outputs.last_deploy_time }}
          SITE_URL: ${{ steps.get_site_url.outputs.url }}

      - name: Generate index.html
        if: steps.deployment_check.outputs.needs_deploy == 'true'
        run: |      
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>DR Podcasts</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body { 
                font-family: system-ui, sans-serif; 
                max-width: 800px; 
                margin: 1rem auto; 
                padding: 0 1rem; 
              }
              .feeds { 
                list-style: none; 
                padding: 0;
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 1rem;
              }
              .feed-link { 
                display: inline-flex;
                align-items: center;
                gap: 0.5em;
                padding: 0.8em;
                background: #f5f5f5;
                border-radius: 4px;
                text-decoration: none;
                color: #333;
                margin: 0;
                font-size: 1rem;
                width: 100%;
                box-sizing: border-box;
                border: 1px solid #ddd;
                transition: border-color 0.2s ease;
              }
              .feed-link:hover {
                border-color: #999;
              }
              .feed-icon {
                height: 2em;
                aspect-ratio: 1;
                border-radius: 4px;
                object-fit: cover;
                flex-shrink: 0;
              }
              .feed-title {
                flex: 1;
                text-transform: capitalize;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
              }
            </style>
          </head>
          <body>
            <h1>DR Podcasts</h1>
            <ul class="feeds">
          EOF
      
          for feed in _site/feeds/*.xml; do
            filename=$(basename "$feed" .xml)
            formatted_title=$(echo "$filename" | sed 's/-/ /g')
            
            # Try multiple approaches to extract image URL using grep
            image_url=$(grep -oP '(?<=<url>)[^<]+(?=</url>)' "$feed" | head -n1 || \
                       grep -oP '(?<=<image href=")[^"]+' "$feed" | head -n1 || \
                       echo '')
            
            echo "Processing $filename - Image URL: $image_url" # Debug output
            
            if [ -n "$image_url" ]; then
              echo "<li><a class='feed-link' href='feeds/$filename.xml'><img class='feed-icon' src='$image_url' alt='$formatted_title icon'><span class='feed-title'>$formatted_title</span></a></li>" >> _site/index.html
            else
              echo "<li><a class='feed-link' href='feeds/$filename.xml'><span class='feed-title'>$formatted_title</span></a></li>" >> _site/index.html
            fi
          done
      
          cat >> _site/index.html << 'EOF'
            </ul>
          </body>
          </html>
          EOF
      
          # Debug: Show generated HTML
          echo "Generated HTML contents:"
          cat _site/index.html

      - name: Setup Pages
        if: steps.deployment_check.outputs.needs_deploy == 'true'
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: steps.deployment_check.outputs.needs_deploy == 'true'
        uses: actions/upload-pages-artifact@v3
        
      - name: Deploy to GitHub Pages
        if: steps.deployment_check.outputs.needs_deploy == 'true'
        id: deployment
        uses: actions/deploy-pages@v4
