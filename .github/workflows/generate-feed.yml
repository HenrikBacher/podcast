name: Update feeds

# Add concurrency to cancel redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths:
      - "**/generate-feed.yml"
      - "**/podcasts.json"
  schedule:
    - cron: "0 * * * *"  # Run at minute 0 of every hour
  workflow_dispatch:

jobs:
  load-podcasts:
    name: Load Podcasts
    runs-on: ubuntu-24.04
    outputs:
      podcasts: ${{ steps.load_data.outputs.podcasts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Podcasts Data
        id: load_data
        run: |
          echo "podcasts=$(jq -c . < podcasts.json)" >> $GITHUB_OUTPUT

  update-feed:
    name: "Update ${{ matrix.podcasts.slug }} feed"
    needs: load-podcasts
    strategy:
      # Add fail-fast to stop all jobs if one fails
      fail-fast: true
      matrix: ${{ fromJson(needs.load-podcasts.outputs.podcasts) }}
    runs-on: ubuntu-24.04
    steps:
      - name: Get latest release
        id: get_latest_release
        run: |
          LATEST_RELEASE_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r '.assets[0].browser_download_url')
          echo "Downloading latest release from $LATEST_RELEASE_URL"
          curl -L $LATEST_RELEASE_URL -o ommer.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "adopt"
          java-package: "jre"

      - name: Execute parser for ${{ matrix.podcasts.slug }} feed
        uses: corrupt952/actions-retry-command@v1.0.7
        with:
          command: java -jar ./ommer.jar --slug ${{ matrix.podcasts.slug }} --urn ${{ matrix.podcasts.urn }} --imageUrl ${{ matrix.podcasts.image }} --apiKey ${{ secrets.API_KEY }} --baseUrl ${{ secrets.HOST_URL }}
          working_directory: ./
          max_attempts: 3
          retry_interval: 10

      - name: Upload feed artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.podcasts.slug }}
          path: output/${{ matrix.podcasts.slug }}.xml
          retention-days: 1

  publish-feed:
    name: "publish feeds"
    needs: [update-feed, load-podcasts]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _site/feeds
          merge-multiple: true

      - name: Get last deployment time
        id: last_deploy
        run: |
          LAST_DEPLOY=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments?environment=github-pages&per_page=1" | \
            jq -r '.[0].created_at // empty')
          if [ -z "$LAST_DEPLOY" ]; then
            LAST_DEPLOY="1970-01-01T00:00:00Z"
          fi
          echo "last_deploy_time=$LAST_DEPLOY" >> $GITHUB_OUTPUT
      
      - name: Check for new feeds or feed changes
        id: deployment_check
        run: |
          # Get the pages URL from deployments
          SITE_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/deployments?environment=github-pages&per_page=1" | \
            jq -r '.[0].payload.web_url // empty')
          
          # Fallback to constructing URL if not found in deployments
          if [ -z "$SITE_URL" ]; then
            SITE_URL="https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}"
          fi
          
          LAST_DEPLOY="${{ steps.last_deploy.outputs.last_deploy_time }}"
          LAST_DEPLOY_RFC822=$(date -d "$LAST_DEPLOY" "+%a, %d %b %Y %H:%M:%S %z")
          LAST_DEPLOY_TS=$(date -d "$LAST_DEPLOY_RFC822" +%s)
          NEEDS_DEPLOY="false"
          
          # Get current feed count from website
          LIVE_COUNT=$(curl -sL --max-time 10 $SITE_URL | grep -o '<li.*</li>' | wc -l || echo "0")
          
          # Count current XML files
          CURRENT_COUNT=$(find "_site/feeds" -name "*.xml" 2>/dev/null | wc -l)
          
          echo "Current XML file count: $CURRENT_COUNT"
          echo "Live deployment feed count: $LIVE_COUNT"
          
          # Check if number of files changed
          if [ "$CURRENT_COUNT" != "$LIVE_COUNT" ]; then
            echo "Number of XML files changed (current: $CURRENT_COUNT, live: $LIVE_COUNT)"
            NEEDS_DEPLOY="true"
          else
            # Check for updated files only if count hasn't changed
            for file in _site/feeds/*.xml; do
              echo "Processing file: $file"
              
              if [ ! -f "$file" ]; then
                echo "Skipping non-existent file: $file"
                continue
              fi
              
              # Extract lastBuildDate using grep
              LAST_BUILD=$(grep -oP '(?<=<lastBuildDate>)[^<]+' "$file" || echo "")
              
              if [ -n "$LAST_BUILD" ]; then
                echo "Found lastBuildDate: $LAST_BUILD"
                BUILD_TS=$(date -d "$LAST_BUILD" +%s 2>/dev/null || echo "0")
                if [ "$BUILD_TS" != "0" ] && [ $BUILD_TS -gt $LAST_DEPLOY_TS ]; then
                  echo "Feed $file has newer lastBuildDate ($LAST_BUILD) than last deployment ($LAST_DEPLOY_RFC822)"
                  NEEDS_DEPLOY="true"
                  break
                fi
              else
                echo "No lastBuildDate found in $file"
              fi
            done
          fi
          
          echo "needs_deploy=$NEEDS_DEPLOY" >> $GITHUB_OUTPUT

      - name: Generate index.html
        if: steps.deployment_check.outputs.needs_deploy == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        run: |      
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>DR Podcasts</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              :root {
                --bg: #ffffff;
                --text: #1a1a1a;
                --card-bg: #ffffff;
                --card-border: rgba(0,0,0,0.1);
                --card-shadow: rgba(0,0,0,0.1);
                --accent: #4f46e5;
              }
              @media (prefers-color-scheme: dark) {
                :root {
                  --bg: #111827;
                  --text: #ffffff;
                  --card-bg: #1f2937;
                  --card-border: rgba(255,255,255,0.1);
                  --card-shadow: rgba(0,0,0,0.3);
                }
              }
              body { 
                font-family: ui-sans-serif, system-ui, -apple-system, sans-serif;
                max-width: 1200px; 
                margin: 0 auto;
                padding: 2rem 1rem;
                background: var(--bg);
                color: var(--text);
                line-height: 1.5;
              }
              .header {
                text-align: center;
                margin-bottom: 3rem;
              }
              .header h1 {
                font-size: 2.5rem;
                font-weight: 800;
                background: linear-gradient(to right, var(--accent), #9333ea);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin: 0;
              }
              .feeds { 
                list-style: none; 
                padding: 0;
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 1.5rem;
              }
              .feeds li { 
                background: var(--card-bg);
                border-radius: 12px;
                border: 1px solid var(--card-border);
                box-shadow: 0 4px 6px -1px var(--card-shadow);
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                overflow: hidden;
              }
              .feeds li:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 15px -3px var(--card-shadow);
              }
              .feed-link { 
                -webkit-tap-highlight-color: transparent;
                user-select: none;
                display: flex;
                align-items: center;
                gap: 1em;
                padding: 1.25em;
                text-decoration: none;
                color: var(--text);
                width: 100%;
                box-sizing: border-box;
              }
              .feed-icon {
                height: 3em;
                width: 3em;
                border-radius: 8px;
                object-fit: cover;
                flex-shrink: 0;
                box-shadow: 0 2px 4px var(--card-shadow);
              }
              .feed-title {
                flex: 1;
                font-size: 1.1rem;
                font-weight: 500;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
              }
              @keyframes slideUp {
                from {
                  transform: translate(-50%, 100%);
                  opacity: 0;
                }
                to {
                  transform: translate(-50%, 0);
                  opacity: 1;
                }
              }
              
              .toast {
                position: fixed;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: var(--accent);
                color: white;
                padding: 12px 24px;
                border-radius: 8px;
                box-shadow: 0 4px 12px -1px var(--card-shadow);
                z-index: 1000;
                animation: slideUp 0.3s ease, fadeOut 0.3s ease 1.7s forwards;
              }
              
              @keyframes fadeOut {
                to {
                  opacity: 0;
                  transform: translate(-50%, 20px);
                }
              }
            </style>
            <script>
              let pressTimer;
              let lastTap = 0;
              
              function copyToClipboard(text) {
                navigator.clipboard.writeText(text).then(() => {
                  const toast = document.createElement('div');
                  toast.className = 'toast';
                  toast.textContent = 'Feed URL copied to clipboard!';
                  document.body.appendChild(toast);
                  
                  // Remove toast after animation
                  toast.addEventListener('animationend', (e) => {
                    if (e.animationName === 'fadeOut') {
                      toast.remove();
                    }
                  });
                });
              }

              document.addEventListener('DOMContentLoaded', () => {
                document.querySelectorAll('.feed-link').forEach(link => {
                  const url = link.href;
                  
                  link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const now = Date.now();
                    const timeDiff = now - lastTap;
                    
                    if (timeDiff < 300 && timeDiff > 0) {
                      // Double tap
                      window.open(url, '_blank');
                    } else {
                      // Single tap
                      copyToClipboard(url);
                    }
                    lastTap = now;
                  });
                  
                  link.addEventListener('mousedown', (e) => {
                    pressTimer = setTimeout(() => {
                      window.open(url, '_blank');
                    }, 500);
                  });
                  
                  link.addEventListener('mouseup', () => {
                    clearTimeout(pressTimer);
                  });
                  
                  link.addEventListener('mouseleave', () => {
                    clearTimeout(pressTimer);
                  });
                  
                  link.addEventListener('touchstart', (e) => {
                    pressTimer = setTimeout(() => {
                      window.open(url, '_blank');
                    }, 500);
                  });
                  
                  link.addEventListener('touchend', () => {
                    clearTimeout(pressTimer);
                  });
                  
                  link.addEventListener('touchcancel', () => {
                    clearTimeout(pressTimer);
                  });
                });
              });
            </script>
          </head>
          <body>
            <header class="header">
              <h1>DR Podcasts</h1>
            </header>
            <ul class="feeds">
          EOF
      
          for feed in _site/feeds/*.xml; do
            filename=$(basename "$feed" .xml)
            formatted_title=$(echo "$filename" | sed 's/-/ /g')
            
            image_url=$(grep -oP '(?<=<url>)[^<]+(?=</url>)' "$feed" | head -n1 || \
                       grep -oP '(?<=<image href=")[^"]+' "$feed" | head -n1 || \
                       echo '')
            
            if [ -n "$image_url" ]; then
              echo "<li><a class='feed-link' href='feeds/$filename.xml'><img class='feed-icon' src='$image_url' alt='$formatted_title icon'><span class='feed-title'>$formatted_title</span></a></li>" >> _site/index.html
            else
              echo "<li><a class='feed-link' href='feeds/$filename.xml'><span class='feed-title'>$formatted_title</span></a></li>" >> _site/index.html
            fi
          done
      
          cat >> _site/index.html << 'EOF'
            </ul>
          </body>
          </html>
          EOF

          
      - name: Setup Pages
        if: steps.deployment_check.outputs.needs_deploy == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: steps.deployment_check.outputs.needs_deploy == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        
      - name: Deploy to GitHub Pages
        if: steps.deployment_check.outputs.needs_deploy == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        id: deployment
        uses: actions/deploy-pages@v4
