name: Update feeds

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_run:
    workflows: ["build-app"]  # Run after build-app workflow
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      usePrerelease:
        description: 'Use pre-release versions'
        required: false
        type: boolean
        default: false
  push:
    paths:
      - "**/generate-feed.yml"
      - "**/podcasts.json"
      - "site/**"
  schedule:
    - cron: "0 * * * *"

jobs:
  load-podcasts:
    name: Load Podcasts
    runs-on: ubuntu-24.04
    outputs:
      podcasts: ${{ steps.load_data.outputs.podcasts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Podcasts Data
        id: load_data
        run: |
          echo "podcasts=$(jq -c . < podcasts.json)" >> $GITHUB_OUTPUT

      - name: Download podcast icons
        run: |
          mkdir -p site/icons
          jq -c '.podcasts[]' podcasts.json | while read -r podcast; do
            slug=$(echo $podcast | jq -r '.slug')
            image=$(echo $podcast | jq -r '.image')
            ext=$(echo "$image" | grep -oP '\.(?:png|jpg|jpeg|gif|webp)$' || echo '.jpg')
            echo "Downloading icon for $slug from $image"
            curl -L "$image" -o "site/icons/$slug$ext"
          done

      - name: Upload template artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site
          retention-days: 1

  update-feed:
    name: "Update ${{ matrix.podcasts.slug }} feed"
    needs: load-podcasts
    env:
      usePrerelease: ${{ inputs.usePrerelease || false }}
    strategy:
      # Stop all jobs if one fails
      fail-fast: true
      matrix: ${{ fromJson(needs.load-podcasts.outputs.podcasts) }}
    runs-on: ubuntu-24.04
    steps:
      - name: Get latest release
        id: get_latest_release
        uses: actions/cache@v4
        with:
          path: ommer.jar
          key: ${{ runner.os }}-ommer-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-ommer-
        
      - name: Download JAR if not cached
        if: steps.get_latest_release.outputs.cache-hit != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_URL=$(gh api "repos/$GITHUB_REPOSITORY/releases" \
              --jq "[.[] | select(.prerelease == $usePrerelease)][0].assets[0].browser_download_url")
          echo "Downloading from: $RELEASE_URL"
          curl -L $RELEASE_URL -o ommer.jar

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          
      - name: Get host URL
        id: get_host_url
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SITE_URL=$(gh api "repos/${GITHUB_REPOSITORY}/pages" --jq '.html_url')
          echo "host_url=$SITE_URL" >> $GITHUB_OUTPUT

      - name: Execute parser for ${{ matrix.podcasts.slug }} feed
        uses: corrupt952/actions-retry-command@v1.0.7
        with:
          command: java -Xmx256m -XX:+UseParallelGC -jar ./ommer.jar --slug ${{ matrix.podcasts.slug }} --urn ${{ matrix.podcasts.urn }} --imageUrl ${{ matrix.podcasts.image }} --apiKey ${{ secrets.API_KEY }} --baseUrl ${{ steps.get_host_url.outputs.host_url }}
          working_directory: ./ 
          max_attempts: 3
          retry_interval: 10

      - name: Upload feed artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.podcasts.slug }}
          path: output/${{ matrix.podcasts.slug }}.xml
          retention-days: 1

  check-deployment:
    name: "Check if deployment is needed"
    needs: [update-feed]
    runs-on: ubuntu-24.04
    outputs:
      needs_deploy: ${{ steps.deployment_check.outputs.needs_deploy }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _site
          merge-multiple: true

      - name: Move feeds to correct location
        run: |
          mkdir -p _site/feeds
          mv _site/*.xml _site/feeds/

      - name: Get last deployment time
        id: last_deploy
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LAST_DEPLOY=$(gh api "repos/$GITHUB_REPOSITORY/deployments" \
            --jq '.[0].created_at // empty' \
            -q '.[] | select(.environment == "github-pages") | .created_at' | head -n1)
          if [ -z "$LAST_DEPLOY" ]; then
            LAST_DEPLOY="1970-01-01T00:00:00Z"
          fi
          echo "last_deploy_time=$LAST_DEPLOY" >> $GITHUB_OUTPUT

      - name: Check for new feeds or feed changes
        id: deployment_check
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NEEDS_DEPLOY="false"

          SITE_URL=$(gh api "repos/${GITHUB_REPOSITORY}/pages" --jq '.html_url')          
          echo "Site URL: $SITE_URL"

          LAST_DEPLOY="${{ steps.last_deploy.outputs.last_deploy_time }}"
          LAST_DEPLOY_RFC822=$(date -d "$LAST_DEPLOY" "+%a, %d %b %Y %H:%M:%S %z")
          LAST_DEPLOY_TS=$(date -d "$LAST_DEPLOY_RFC822" +%s)
          
          # Get current feed count from website by counting feed-link classes
          LIVE_COUNT=$(curl -sL --max-time 10 $SITE_URL | grep -o "class='feed-link'" | wc -l || echo "0")
          
          # Count current XML files
          CURRENT_COUNT=$(find "_site/feeds" -name "*.xml" 2>/dev/null | wc -l)
          
          echo "Current XML file count: $CURRENT_COUNT"
          echo "Live deployment feed count: $LIVE_COUNT"
          
          # Check if number of files changed
          if [ "$CURRENT_COUNT" != "$LIVE_COUNT" ]; then
            echo "Number of XML files changed (current: $CURRENT_COUNT, live: $LIVE_COUNT)"
            NEEDS_DEPLOY="true"
          else
            # Check for updated files only if count hasn't changed
            for file in _site/feeds/*.xml; do
              echo "Processing file: $file"
              
              if [ ! -f "$file" ]; then
                echo "Skipping non-existent file: $file"
                continue
              fi
              
              # Extract lastBuildDate using grep
              LAST_BUILD=$(grep -oP '(?<=<lastBuildDate>)[^<]+' "$file" || echo "")
              
              if [ -n "$LAST_BUILD" ]; then
                echo "Found lastBuildDate: $LAST_BUILD"
                BUILD_TS=$(date -d "$LAST_BUILD" +%s 2>/dev/null || echo "0")
                if [ "$BUILD_TS" != "0" ] && [ $BUILD_TS -gt $LAST_DEPLOY_TS ]; then
                  echo "Feed $file has newer lastBuildDate ($LAST_BUILD) than last deployment ($LAST_DEPLOY_RFC822)"
                  NEEDS_DEPLOY="true"
                  break
                fi
              else
                echo "No lastBuildDate found in $file"
              fi
            done
          fi
          
          echo "needs_deploy=$NEEDS_DEPLOY" >> $GITHUB_OUTPUT

  publish-feed:
    name: "Publish feeds"
    needs: [check-deployment]
    if: |
      (github.ref == 'refs/heads/main') &&
      (needs.check-deployment.outputs.needs_deploy == 'true' || github.event_name == 'push')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: _site
          merge-multiple: true

      - name: Move feeds to correct location
        run: |
          mkdir -p _site/feeds
          mv _site/*.xml _site/feeds/

      - name: Generate index.html
        run: |          
          # Generate feeds HTML
          feeds_html=""
          for feed in _site/feeds/*.xml; do
            filename=$(basename "$feed" .xml)
            formatted_title=$(echo "$filename" | sed 's/-/ /g')
            
            # Look for local icon file with any supported extension
            icon_path=""
            for ext in jpg jpeg png gif webp; do
              if [ -f "_site/icons/$filename.$ext" ]; then
                icon_path="icons/$filename.$ext"
                break
              fi
            done
            
            if [ -n "$icon_path" ]; then
              feeds_html+="<li><a class='feed-link' href='feeds/$filename.xml'><img class='feed-icon' src='$icon_path' loading='lazy' alt='$formatted_title'><span class='feed-title'>$formatted_title</span></a></li>"
            else
              feeds_html+="<li><a class='feed-link' href='feeds/$filename.xml'><div class='feed-icon'></div><span class='feed-title'>$formatted_title</span></a></li>"
            fi
          done
          
          # Replace entire section between markers with generated feeds
          sed -i "/<!-- BEGIN_FEEDS -->/,/<!-- END_FEEDS -->/c\        <!-- BEGIN_FEEDS -->\n        $feeds_html\n        <!-- END_FEEDS -->" _site/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
