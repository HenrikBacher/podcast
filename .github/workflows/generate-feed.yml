name: Update feeds

# Common configuration
env:
  JAVA_VERSION: "21"
  JAVA_DISTRIBUTION: "adopt"
  OUTPUT_DIR: "_site"
  ICONS_DIR: "icons"
  FEEDS_DIR: "feeds"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    paths:
      - "**/generate-feed.yml"
      - "**/podcasts.json"
      - "site/**"
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  load-podcasts:
    name: Load Podcasts
    runs-on: ubuntu-24.04
    outputs:
      podcasts: ${{ steps.load_data.outputs.podcasts }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Load Podcasts Data
        id: load_data
        shell: bash
        run: echo "podcasts=$(jq -c . < podcasts.json)" >> $GITHUB_OUTPUT

      - name: Download podcast icons
        shell: bash
        run: |
          mkdir -p ${{ env.OUTPUT_DIR }}/${{ env.ICONS_DIR }}
          jq -r '.podcasts[] | "\(.slug) \(.image)"' podcasts.json | while read -r slug image; do
            ext=$(echo "$image" | grep -oP '\.(?:png|jpg|jpeg|gif|webp)$' || echo '.jpg')
            echo "Downloading icon for $slug"
            curl -sSL "$image" -o "${{ env.OUTPUT_DIR }}/${{ env.ICONS_DIR }}/$slug$ext"
          done

      - uses: actions/upload-artifact@v4
        with:
          name: site
          path: ${{ env.OUTPUT_DIR }}
          retention-days: 1

  update-feed:
    needs: load-podcasts
    name: "Update ${{ matrix.podcasts.slug }} feed"
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.load-podcasts.outputs.podcasts) }}
    runs-on: ubuntu-24.04
    steps:
      - name: Get latest release
        id: get_latest_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE_URL=$(gh api "repos/$GITHUB_REPOSITORY/releases/latest" --jq '.assets[0].browser_download_url')
          echo "Downloading latest release from $LATEST_RELEASE_URL"
          curl -L $LATEST_RELEASE_URL -o ommer.jar

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-package: "jre"

      - name: Execute parser for ${{ matrix.podcasts.slug }} feed
        uses: corrupt952/actions-retry-command@v1.0.7
        with:
          command: java -jar ./ommer.jar --slug ${{ matrix.podcasts.slug }} --urn ${{ matrix.podcasts.urn }} --imageUrl ${{ matrix.podcasts.image }} --apiKey ${{ secrets.API_KEY }} --baseUrl ${{ secrets.HOST_URL }}
          working_directory: ./
          max_attempts: 3
          retry_interval: 10

      - name: Upload feed artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.podcasts.slug }}
          path: output/${{ matrix.podcasts.slug }}.xml
          retention-days: 1

  publish-feed:
    needs: [update-feed, load-podcasts]
    if: |
      github.ref == 'refs/heads/main' || 
      github.ref == 'refs/heads/master'
    name: "Publish feeds"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-24.04
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.OUTPUT_DIR }}
          merge-multiple: true

      - name: Prepare feeds directory
        shell: bash
        run: |
          mkdir -p ${{ env.OUTPUT_DIR }}/${{ env.FEEDS_DIR }}
          mv ${{ env.OUTPUT_DIR }}/*.xml ${{ env.OUTPUT_DIR }}/${{ env.FEEDS_DIR }}/

      - name: Check deployment status
        id: deployment_check
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get last deployment time
          LAST_DEPLOY=$(gh api "repos/$GITHUB_REPOSITORY/deployments" \
            --jq 'map(select(.environment == "github-pages"))[0].created_at // "1970-01-01T00:00:00Z"')
          LAST_DEPLOY_TS=$(date -d "$LAST_DEPLOY" +%s)
          
          # Get site URL and current feed count
          SITE_URL=$(gh api "repos/${GITHUB_REPOSITORY}/pages" --jq '.html_url')
          LIVE_COUNT=$(curl -sL --max-time 10 $SITE_URL | grep -o "class='feed-link'" | wc -l || echo "0")
          CURRENT_COUNT=$(find "${{ env.OUTPUT_DIR }}/${{ env.FEEDS_DIR }}" -name "*.xml" | wc -l)
          
          # Check for changes
          if [ "$CURRENT_COUNT" != "$LIVE_COUNT" ]; then
            echo "needs_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check feed dates
          while IFS= read -r file; do
            if [ -n "$(grep -oP '(?<=<lastBuildDate>)[^<]+' "$file")" ]; then
              BUILD_TS=$(date -d "$(grep -oP '(?<=<lastBuildDate>)[^<]+' "$file")" +%s)
              if [ "$BUILD_TS" -gt "$LAST_DEPLOY_TS" ]; then
                echo "needs_deploy=true" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
          done < <(find "${{ env.OUTPUT_DIR }}/${{ env.FEEDS_DIR }}" -name "*.xml")
          
          echo "needs_deploy=false" >> $GITHUB_OUTPUT

      - name: Generate index.html
        if: |
          steps.deployment_check.outputs.needs_deploy == 'true' || 
          github.event_name == 'workflow_dispatch' || 
          github.event_name == 'push'
        shell: bash
        run: |
          generate_feed_html() {
            local filename="$1"
            local formatted_title=$(echo "$filename" | sed 's/-/ /g')
            local icon_path=""
            
            for ext in jpg jpeg png gif webp; do
              if [ -f "${{ env.OUTPUT_DIR }}/${{ env.ICONS_DIR }}/$filename.$ext" ]; then
                icon_path="${{ env.ICONS_DIR }}/$filename.$ext"
                break
              fi
            done
            
            if [ -n "$icon_path" ]; then
              echo "<li><a class='feed-link' href='${{ env.FEEDS_DIR }}/$filename.xml'><img class='feed-icon' src='$icon_path' loading='lazy' alt='$formatted_title'><span class='feed-title'>$formatted_title</span></a></li>"
            else
              echo "<li><a class='feed-link' href='${{ env.FEEDS_DIR }}/$filename.xml'><div class='feed-icon'></div><span class='feed-title'>$formatted_title</span></a></li>"
            fi
          }
          
          feeds_html=""
          for feed in ${{ env.OUTPUT_DIR }}/${{ env.FEEDS_DIR }}/*.xml; do
            feeds_html+="$(generate_feed_html "$(basename "$feed" .xml)")"
          done
          
          sed -i "/<!-- BEGIN_FEEDS -->/,/<!-- END_FEEDS -->/c\        <!-- BEGIN_FEEDS -->\n        $feeds_html\n        <!-- END_FEEDS -->" ${{ env.OUTPUT_DIR }}/index.html

      - name: Setup Pages
        if: |
          steps.deployment_check.outputs.needs_deploy == 'true' || 
          github.event_name == 'workflow_dispatch' || 
          github.event_name == 'push'
        uses: actions/configure-pages@v5
        
      - name: Upload Pages artifact
        if: steps.deployment_check.outputs.needs_deploy == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        
      - name: Deploy to GitHub Pages
        if: steps.deployment_check.outputs.needs_deploy == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        id: deployment
        uses: actions/deploy-pages@v4
