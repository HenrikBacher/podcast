name: Update feeds

on:
  push:
    paths:
      - '**/generate-feed.yml'
  schedule:
    - cron: '10 * * * *'
  workflow_dispatch:

jobs:
  load-podcasts:
    runs-on: ubuntu-latest
    outputs:
      podcasts: ${{ steps.set_matrix.outputs.PODCASTS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Podcasts Data
        run: |
          PODCASTS_JSON=$(cat ./podcasts.json)
          PODCASTS_ESCAPED=$(echo "$PODCASTS" | sed 's/"/\\"/g')
          echo "name=PODCASTS::$PODCASTS_ESCAPED" >> $GITHUB_ENV

  update-feed:
    name: "Update ${{ matrix.podcasts.slug }} feed"
    needs: load-podcasts
    strategy:
      matrix:
        matrix: ${{fromJson(needs.load-podcasts.outputs.podcasts)}}
    runs-on: ubuntu-latest
    steps:
      - name: Get latest release
        id: get_latest_release
        run: |
          LATEST_RELEASE_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r '.assets[0].browser_download_url')
          echo "Downloading latest release from $LATEST_RELEASE_URL"
          curl -L $LATEST_RELEASE_URL -o ommer.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Execute ommer.jar
        run: java -jar ./ommer.jar --slug ${SLUG} --urn ${URN} --imageUrl ${IMAGE} --apiKey ${{ secrets.API_KEY }} --baseUrl ${{ secrets.HOST_URL }}
        env:
          SLUG: ${{ matrix.podcasts.slug }}
          URN: ${{ matrix.podcasts.urn }}
          IMAGE: ${{ matrix.podcasts.image }}

      - name: Check lastBuildDate
        id: check_date
        run: |
          $xmlPath = "output/${{ matrix.podcasts.slug }}.xml"
          [xml]$xmlContent = Get-Content $xmlPath
          $lastBuildDateStr = $xmlContent.rss.channel.lastBuildDate
          Write-Host "Latest update: $lastBuildDateStr"
          
          $format = 'ddd, dd MMM yyyy HH:mm:ss zzz'
          $culture = [System.Globalization.CultureInfo]::InvariantCulture
          $lastBuildDate = [datetime]::ParseExact($lastBuildDateStr, $format, $culture)
          $currentUtcTime = [datetime]::UtcNow
          $recentlyThresholdMinutes = 90
          
          if ($lastBuildDate -gt $currentUtcTime.AddMinutes($recentlyThresholdMinutes)) {
            echo "PODCAST_RECENTLY_UPDATED=true" | Out-File -FilePath $Env:GITHUB_ENV -Append
            echo "Podcast updated within the last $recentThreshold minutes, uploading to Azure Blob Storage"
          } else {
            echo "PODCAST_RECENTLY_UPDATED=false" | Out-File -FilePath $Env:GITHUB_ENV -Append
            echo "Podcast not updated recently, skipping upload to Azure Blob Storage"
          }
        shell: pwsh
      
      - name: Login to Azure
        if: env.PODCAST_RECENTLY_UPDATED == 'true'
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Calculate MD5 of local feed.xml and base64 encode
        if: env.PODCAST_RECENTLY_UPDATED == 'true'
        id: local_md5
        run: |
          MD5_HASH=$(md5sum output/${{ matrix.podcasts.slug }}.xml | awk '{print $1}' | xxd -r -p | base64)
          echo "LOCAL_MD5=$MD5_HASH" >> $GITHUB_ENV
          echo "LOCAL_MD5=$MD5_HASH"
      
      - name: Get contentMd5 of the blob in Azure Blob Storage
        if: env.PODCAST_RECENTLY_UPDATED == 'true'
        id: blob_md5
        continue-on-error: true
        run: |
          BLOB_PROPERTIES=$(az storage blob show \
            --account-name ${{ secrets.STORAGE_ACCOUNT }} \
            --container-name ${{ secrets.CONTAINER_NAME }} \
            --auth-mode login \
            --name ${{ matrix.podcasts.slug }}.xml \
            --query properties.contentSettings.contentMd5 -o tsv)
          echo "BLOB_MD5=$BLOB_PROPERTIES" >> $GITHUB_ENV
          echo "BLOB_MD5=$BLOB_PROPERTIES"
      
      - name: Upload feed.xml to Azure Blob Storage if different
        if: env.PODCAST_RECENTLY_UPDATED == 'true' && env.LOCAL_MD5 != env.BLOB_MD5
        run: |
          az storage blob upload \
            --account-name ${{ secrets.STORAGE_ACCOUNT }} \
            --container-name ${{ secrets.CONTAINER_NAME }} \
            --auth-mode login \
            --name ${{ matrix.podcasts.slug }}.xml \
            --file output/${{ matrix.podcasts.slug }}.xml \
            --overwrite